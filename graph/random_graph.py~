
# TODO: Use networkX or numpy?
import numpy as np
import networkx as nx
import scipy
from numpy import linalg
import matplotlib.pyplot as plt


def HittingTime(G, t):
    """
    Given a graph adjacency matrix and a start and goal state,
    return a hitting time.
    """
    A = G.copy()
    A[t, :] = 0
    A[t, t] = 1

    # print('A', A)
    A = (A.T / A.sum(axis=1)).T
    # print('A', A)
    B = A.copy()
    Z = []
    for n in range(G.shape[0] * G.shape[0] * 2):
        Z.append(B[:, t]) # TODO: We can get the whole vector B[:, t] to speedup by n times
        B = np.dot(B, A)

    ret = np.zeros_like(Z[0])
    for n in range(len(Z)):
        if n == 0:
            ret += Z[n] * (n+1)
        else:
            ret += (Z[n] - Z[n-1]) * (n+1)
    if any(Z[len(Z) - 1] < 1):
        ret += (1 - Z[len(Z)-1]) * (len(Z))
    # print('Z', Z)
    # print('ret', ret)
    return ret

def ComputeCoverTime(G):
    """
    Given a graph adjacency matrix, return a cover time.
    We calculate the transition up to .95 probability mass.
    """
    N = G.shape[0]

    maxHittingTime = 0
    for i in range(N):
        # for j in range(N):
        #     if i == j:
        #         continue
        h_array = HittingTime(G, i)
        h = np.amax(h_array)
        if h > maxHittingTime:
            maxHittingTime = h

    return maxHittingTime

def ComputeFielderVector(G):
    """
    Given a graph adjacency matrix, return a Fielder vector.
    """
    v = nx.fiedler_vector(G)
    
    return v

def ComputeConnectivity(G):
    lb = nx.algebraic_connectivity(nx.to_networkx_graph(G))
    # print('lambda        ', lb)
    return lb

def AddEdge(G, vi, vj):
    # print('Options:', vi, ', ', vj)

    augGraph = G.copy()
    # print('augGraph', augGraph)
    augGraph[vi, vj] = 1
    augGraph[vj, vi] = 1
    return augGraph

def GenerateRandomConnectedGraph(size, edge_dense):
    # 1. Add a node one by one to the graph connecting to a random node.
    # 2. Add edges randomly until the density is reached.
    G = np.zeros((size, size), dtype=int)
    
    for n in range(size):
        if n == 0:
            continue
        # randomly pick a node in graph to connect to the new node.
        v = np.random.randint(0, n)
        G[n][v] = 1
        G[v][n] = 1

    m = n - 1
    while m < size * edge_dense:
        # Add an edge randomly
        s = np.random.randint(0, size)
        t = np.random.randint(0, size)
        if G[s][t] == 0:
            continue
        else:
            G[s][t] = 1
            G[t][s] = 1
            m += 1
    return G


if __name__ == "__main__":

    # PlotConnectivityAndCoverTime(100)
    # exit(0)
    
    Gnx = nx.path_graph(10)
    
    graph = nx.to_numpy_matrix(Gnx)

    v = ComputeFielderVector(Gnx) # numpy array of floats
    
    augGraph = AddOption(graph, np.argmax(v), np.argmin(v))
    

    eigenGraph, eigenOptions = Eigenoptions(graph, 8)
    print('eigenGraph', eigenGraph)
    print('eigenoptinos', eigenOptions)
    
    # print('Graphs')
    # print(graph)
    # print(augGraph)
    t2 = ComputeCoverTime(augGraph)
    print('CoverTime Aug1', t2)
    lb2 = nx.algebraic_connectivity(nx.to_networkx_graph(augGraph))
    print('lambda        ', lb2)

    
